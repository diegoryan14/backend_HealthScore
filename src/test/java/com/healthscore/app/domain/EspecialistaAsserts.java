package com.healthscore.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EspecialistaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEspecialistaAllPropertiesEquals(Especialista expected, Especialista actual) {
        assertEspecialistaAutoGeneratedPropertiesEquals(expected, actual);
        assertEspecialistaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEspecialistaAllUpdatablePropertiesEquals(Especialista expected, Especialista actual) {
        assertEspecialistaUpdatableFieldsEquals(expected, actual);
        assertEspecialistaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEspecialistaAutoGeneratedPropertiesEquals(Especialista expected, Especialista actual) {
        assertThat(expected)
            .as("Verify Especialista auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEspecialistaUpdatableFieldsEquals(Especialista expected, Especialista actual) {
        assertThat(expected)
            .as("Verify Especialista relevant properties")
            .satisfies(e -> assertThat(e.getNome()).as("check nome").isEqualTo(actual.getNome()))
            .satisfies(e -> assertThat(e.getCpf()).as("check cpf").isEqualTo(actual.getCpf()))
            .satisfies(e -> assertThat(e.getEspecializacao()).as("check especializacao").isEqualTo(actual.getEspecializacao()))
            .satisfies(e -> assertThat(e.getDataFormacao()).as("check dataFormacao").isEqualTo(actual.getDataFormacao()))
            .satisfies(e -> assertThat(e.getTelefone()).as("check telefone").isEqualTo(actual.getTelefone()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getDataNascimento()).as("check dataNascimento").isEqualTo(actual.getDataNascimento()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEspecialistaUpdatableRelationshipsEquals(Especialista expected, Especialista actual) {}
}
