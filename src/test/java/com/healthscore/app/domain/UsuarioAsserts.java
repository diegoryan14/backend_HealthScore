package com.healthscore.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class UsuarioAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUsuarioAllPropertiesEquals(Usuario expected, Usuario actual) {
        assertUsuarioAutoGeneratedPropertiesEquals(expected, actual);
        assertUsuarioAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUsuarioAllUpdatablePropertiesEquals(Usuario expected, Usuario actual) {
        assertUsuarioUpdatableFieldsEquals(expected, actual);
        assertUsuarioUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUsuarioAutoGeneratedPropertiesEquals(Usuario expected, Usuario actual) {
        assertThat(expected)
            .as("Verify Usuario auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUsuarioUpdatableFieldsEquals(Usuario expected, Usuario actual) {
        assertThat(expected)
            .as("Verify Usuario relevant properties")
            .satisfies(e -> assertThat(e.getPlano()).as("check plano").isEqualTo(actual.getPlano()))
            .satisfies(e -> assertThat(e.getDataRegistro()).as("check dataRegistro").isEqualTo(actual.getDataRegistro()))
            .satisfies(e -> assertThat(e.getTelefone()).as("check telefone").isEqualTo(actual.getTelefone()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getDataNascimento()).as("check dataNascimento").isEqualTo(actual.getDataNascimento()))
            .satisfies(e -> assertThat(e.getMetaConsumoAgua()).as("check metaConsumoAgua").isEqualTo(actual.getMetaConsumoAgua()))
            .satisfies(e -> assertThat(e.getMetaSono()).as("check metaSono").isEqualTo(actual.getMetaSono()))
            .satisfies(
                e ->
                    assertThat(e.getMetaCaloriasConsumidas())
                        .as("check metaCaloriasConsumidas")
                        .isEqualTo(actual.getMetaCaloriasConsumidas())
            )
            .satisfies(
                e -> assertThat(e.getMetaCaloriasQueimadas()).as("check metaCaloriasQueimadas").isEqualTo(actual.getMetaCaloriasQueimadas())
            )
            .satisfies(e -> assertThat(e.getPontosUser()).as("check pontosUser").isEqualTo(actual.getPontosUser()))
            .satisfies(e -> assertThat(e.getGenero()).as("check genero").isEqualTo(actual.getGenero()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUsuarioUpdatableRelationshipsEquals(Usuario expected, Usuario actual) {}
}
